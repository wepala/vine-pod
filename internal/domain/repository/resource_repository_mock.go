// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"github.com/wepala/vine-os/core/pericarp/pkg/domain"
	"github.com/wepala/vine-pod/internal/domain/entity"
	"sync"
)

// Ensure, that ResourceRepositoryMock does implement ResourceRepository.
// If this is not the case, regenerate this file with moq.
var _ ResourceRepository = &ResourceRepositoryMock{}

// ResourceRepositoryMock is a mock implementation of ResourceRepository.
//
//	func TestSomethingThatUsesResourceRepository(t *testing.T) {
//
//		// make and configure a mocked ResourceRepository
//		mockedResourceRepository := &ResourceRepositoryMock{
//			DeleteFunc: func(ctx context.Context, id string) error {
//				panic("mock out the Delete method")
//			},
//			FindByContainerFunc: func(ctx context.Context, containerURI string) ([]entity.Resource, error) {
//				panic("mock out the FindByContainer method")
//			},
//			GetByIDFunc: func(ctx context.Context, id string) (entity.Resource, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByURIFunc: func(ctx context.Context, uri string) (entity.Resource, error) {
//				panic("mock out the GetByURI method")
//			},
//			ListFunc: func(ctx context.Context, limit int, offset int) ([]entity.Resource, error) {
//				panic("mock out the List method")
//			},
//			LoadEventsFunc: func(ctx context.Context, aggregateID string) ([]domain.Event, error) {
//				panic("mock out the LoadEvents method")
//			},
//			LoadEventsFromVersionFunc: func(ctx context.Context, aggregateID string, version int) ([]domain.Event, error) {
//				panic("mock out the LoadEventsFromVersion method")
//			},
//			SaveFunc: func(ctx context.Context, resource entity.Resource) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedResourceRepository in code that requires ResourceRepository
//		// and then make assertions.
//
//	}
type ResourceRepositoryMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id string) error

	// FindByContainerFunc mocks the FindByContainer method.
	FindByContainerFunc func(ctx context.Context, containerURI string) ([]entity.Resource, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id string) (entity.Resource, error)

	// GetByURIFunc mocks the GetByURI method.
	GetByURIFunc func(ctx context.Context, uri string) (entity.Resource, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, limit int, offset int) ([]entity.Resource, error)

	// LoadEventsFunc mocks the LoadEvents method.
	LoadEventsFunc func(ctx context.Context, aggregateID string) ([]domain.Event, error)

	// LoadEventsFromVersionFunc mocks the LoadEventsFromVersion method.
	LoadEventsFromVersionFunc func(ctx context.Context, aggregateID string, version int) ([]domain.Event, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, resource entity.Resource) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// FindByContainer holds details about calls to the FindByContainer method.
		FindByContainer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ContainerURI is the containerURI argument value.
			ContainerURI string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetByURI holds details about calls to the GetByURI method.
		GetByURI []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URI is the uri argument value.
			URI string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// LoadEvents holds details about calls to the LoadEvents method.
		LoadEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregateID is the aggregateID argument value.
			AggregateID string
		}
		// LoadEventsFromVersion holds details about calls to the LoadEventsFromVersion method.
		LoadEventsFromVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregateID is the aggregateID argument value.
			AggregateID string
			// Version is the version argument value.
			Version int
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource entity.Resource
		}
	}
	lockDelete                sync.RWMutex
	lockFindByContainer       sync.RWMutex
	lockGetByID               sync.RWMutex
	lockGetByURI              sync.RWMutex
	lockList                  sync.RWMutex
	lockLoadEvents            sync.RWMutex
	lockLoadEventsFromVersion sync.RWMutex
	lockSave                  sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *ResourceRepositoryMock) Delete(ctx context.Context, id string) error {
	if mock.DeleteFunc == nil {
		panic("ResourceRepositoryMock.DeleteFunc: method is nil but ResourceRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedResourceRepository.DeleteCalls())
func (mock *ResourceRepositoryMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindByContainer calls FindByContainerFunc.
func (mock *ResourceRepositoryMock) FindByContainer(ctx context.Context, containerURI string) ([]entity.Resource, error) {
	if mock.FindByContainerFunc == nil {
		panic("ResourceRepositoryMock.FindByContainerFunc: method is nil but ResourceRepository.FindByContainer was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ContainerURI string
	}{
		Ctx:          ctx,
		ContainerURI: containerURI,
	}
	mock.lockFindByContainer.Lock()
	mock.calls.FindByContainer = append(mock.calls.FindByContainer, callInfo)
	mock.lockFindByContainer.Unlock()
	return mock.FindByContainerFunc(ctx, containerURI)
}

// FindByContainerCalls gets all the calls that were made to FindByContainer.
// Check the length with:
//
//	len(mockedResourceRepository.FindByContainerCalls())
func (mock *ResourceRepositoryMock) FindByContainerCalls() []struct {
	Ctx          context.Context
	ContainerURI string
} {
	var calls []struct {
		Ctx          context.Context
		ContainerURI string
	}
	mock.lockFindByContainer.RLock()
	calls = mock.calls.FindByContainer
	mock.lockFindByContainer.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *ResourceRepositoryMock) GetByID(ctx context.Context, id string) (entity.Resource, error) {
	if mock.GetByIDFunc == nil {
		panic("ResourceRepositoryMock.GetByIDFunc: method is nil but ResourceRepository.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedResourceRepository.GetByIDCalls())
func (mock *ResourceRepositoryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByURI calls GetByURIFunc.
func (mock *ResourceRepositoryMock) GetByURI(ctx context.Context, uri string) (entity.Resource, error) {
	if mock.GetByURIFunc == nil {
		panic("ResourceRepositoryMock.GetByURIFunc: method is nil but ResourceRepository.GetByURI was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URI string
	}{
		Ctx: ctx,
		URI: uri,
	}
	mock.lockGetByURI.Lock()
	mock.calls.GetByURI = append(mock.calls.GetByURI, callInfo)
	mock.lockGetByURI.Unlock()
	return mock.GetByURIFunc(ctx, uri)
}

// GetByURICalls gets all the calls that were made to GetByURI.
// Check the length with:
//
//	len(mockedResourceRepository.GetByURICalls())
func (mock *ResourceRepositoryMock) GetByURICalls() []struct {
	Ctx context.Context
	URI string
} {
	var calls []struct {
		Ctx context.Context
		URI string
	}
	mock.lockGetByURI.RLock()
	calls = mock.calls.GetByURI
	mock.lockGetByURI.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ResourceRepositoryMock) List(ctx context.Context, limit int, offset int) ([]entity.Resource, error) {
	if mock.ListFunc == nil {
		panic("ResourceRepositoryMock.ListFunc: method is nil but ResourceRepository.List was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, limit, offset)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedResourceRepository.ListCalls())
func (mock *ResourceRepositoryMock) ListCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// LoadEvents calls LoadEventsFunc.
func (mock *ResourceRepositoryMock) LoadEvents(ctx context.Context, aggregateID string) ([]domain.Event, error) {
	if mock.LoadEventsFunc == nil {
		panic("ResourceRepositoryMock.LoadEventsFunc: method is nil but ResourceRepository.LoadEvents was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AggregateID string
	}{
		Ctx:         ctx,
		AggregateID: aggregateID,
	}
	mock.lockLoadEvents.Lock()
	mock.calls.LoadEvents = append(mock.calls.LoadEvents, callInfo)
	mock.lockLoadEvents.Unlock()
	return mock.LoadEventsFunc(ctx, aggregateID)
}

// LoadEventsCalls gets all the calls that were made to LoadEvents.
// Check the length with:
//
//	len(mockedResourceRepository.LoadEventsCalls())
func (mock *ResourceRepositoryMock) LoadEventsCalls() []struct {
	Ctx         context.Context
	AggregateID string
} {
	var calls []struct {
		Ctx         context.Context
		AggregateID string
	}
	mock.lockLoadEvents.RLock()
	calls = mock.calls.LoadEvents
	mock.lockLoadEvents.RUnlock()
	return calls
}

// LoadEventsFromVersion calls LoadEventsFromVersionFunc.
func (mock *ResourceRepositoryMock) LoadEventsFromVersion(ctx context.Context, aggregateID string, version int) ([]domain.Event, error) {
	if mock.LoadEventsFromVersionFunc == nil {
		panic("ResourceRepositoryMock.LoadEventsFromVersionFunc: method is nil but ResourceRepository.LoadEventsFromVersion was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AggregateID string
		Version     int
	}{
		Ctx:         ctx,
		AggregateID: aggregateID,
		Version:     version,
	}
	mock.lockLoadEventsFromVersion.Lock()
	mock.calls.LoadEventsFromVersion = append(mock.calls.LoadEventsFromVersion, callInfo)
	mock.lockLoadEventsFromVersion.Unlock()
	return mock.LoadEventsFromVersionFunc(ctx, aggregateID, version)
}

// LoadEventsFromVersionCalls gets all the calls that were made to LoadEventsFromVersion.
// Check the length with:
//
//	len(mockedResourceRepository.LoadEventsFromVersionCalls())
func (mock *ResourceRepositoryMock) LoadEventsFromVersionCalls() []struct {
	Ctx         context.Context
	AggregateID string
	Version     int
} {
	var calls []struct {
		Ctx         context.Context
		AggregateID string
		Version     int
	}
	mock.lockLoadEventsFromVersion.RLock()
	calls = mock.calls.LoadEventsFromVersion
	mock.lockLoadEventsFromVersion.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ResourceRepositoryMock) Save(ctx context.Context, resource entity.Resource) error {
	if mock.SaveFunc == nil {
		panic("ResourceRepositoryMock.SaveFunc: method is nil but ResourceRepository.Save was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource entity.Resource
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, resource)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedResourceRepository.SaveCalls())
func (mock *ResourceRepositoryMock) SaveCalls() []struct {
	Ctx      context.Context
	Resource entity.Resource
} {
	var calls []struct {
		Ctx      context.Context
		Resource entity.Resource
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
