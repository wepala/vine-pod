// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"sync"
)

// Ensure, that ResourceRepositoryMock does implement ResourceRepository.
// If this is not the case, regenerate this file with moq.
var _ ResourceRepository = &ResourceRepositoryMock{}

// ResourceRepositoryMock is a mock implementation of ResourceRepository.
//
//	func TestSomethingThatUsesResourceRepository(t *testing.T) {
//
//		// make and configure a mocked ResourceRepository
//		mockedResourceRepository := &ResourceRepositoryMock{
//			CreateFunc: func(ctx context.Context, resource *Resource) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, id string) error {
//				panic("mock out the Delete method")
//			},
//			FindByContainerFunc: func(ctx context.Context, containerURI string) ([]*Resource, error) {
//				panic("mock out the FindByContainer method")
//			},
//			GetByIDFunc: func(ctx context.Context, id string) (*Resource, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByURIFunc: func(ctx context.Context, uri string) (*Resource, error) {
//				panic("mock out the GetByURI method")
//			},
//			ListFunc: func(ctx context.Context, limit int, offset int) ([]*Resource, error) {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(ctx context.Context, resource *Resource) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedResourceRepository in code that requires ResourceRepository
//		// and then make assertions.
//
//	}
type ResourceRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, resource *Resource) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id string) error

	// FindByContainerFunc mocks the FindByContainer method.
	FindByContainerFunc func(ctx context.Context, containerURI string) ([]*Resource, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id string) (*Resource, error)

	// GetByURIFunc mocks the GetByURI method.
	GetByURIFunc func(ctx context.Context, uri string) (*Resource, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, limit int, offset int) ([]*Resource, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, resource *Resource) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource *Resource
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// FindByContainer holds details about calls to the FindByContainer method.
		FindByContainer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ContainerURI is the containerURI argument value.
			ContainerURI string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetByURI holds details about calls to the GetByURI method.
		GetByURI []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URI is the uri argument value.
			URI string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource *Resource
		}
	}
	lockCreate          sync.RWMutex
	lockDelete          sync.RWMutex
	lockFindByContainer sync.RWMutex
	lockGetByID         sync.RWMutex
	lockGetByURI        sync.RWMutex
	lockList            sync.RWMutex
	lockUpdate          sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ResourceRepositoryMock) Create(ctx context.Context, resource *Resource) error {
	if mock.CreateFunc == nil {
		panic("ResourceRepositoryMock.CreateFunc: method is nil but ResourceRepository.Create was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource *Resource
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, resource)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedResourceRepository.CreateCalls())
func (mock *ResourceRepositoryMock) CreateCalls() []struct {
	Ctx      context.Context
	Resource *Resource
} {
	var calls []struct {
		Ctx      context.Context
		Resource *Resource
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ResourceRepositoryMock) Delete(ctx context.Context, id string) error {
	if mock.DeleteFunc == nil {
		panic("ResourceRepositoryMock.DeleteFunc: method is nil but ResourceRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedResourceRepository.DeleteCalls())
func (mock *ResourceRepositoryMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindByContainer calls FindByContainerFunc.
func (mock *ResourceRepositoryMock) FindByContainer(ctx context.Context, containerURI string) ([]*Resource, error) {
	if mock.FindByContainerFunc == nil {
		panic("ResourceRepositoryMock.FindByContainerFunc: method is nil but ResourceRepository.FindByContainer was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ContainerURI string
	}{
		Ctx:          ctx,
		ContainerURI: containerURI,
	}
	mock.lockFindByContainer.Lock()
	mock.calls.FindByContainer = append(mock.calls.FindByContainer, callInfo)
	mock.lockFindByContainer.Unlock()
	return mock.FindByContainerFunc(ctx, containerURI)
}

// FindByContainerCalls gets all the calls that were made to FindByContainer.
// Check the length with:
//
//	len(mockedResourceRepository.FindByContainerCalls())
func (mock *ResourceRepositoryMock) FindByContainerCalls() []struct {
	Ctx          context.Context
	ContainerURI string
} {
	var calls []struct {
		Ctx          context.Context
		ContainerURI string
	}
	mock.lockFindByContainer.RLock()
	calls = mock.calls.FindByContainer
	mock.lockFindByContainer.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *ResourceRepositoryMock) GetByID(ctx context.Context, id string) (*Resource, error) {
	if mock.GetByIDFunc == nil {
		panic("ResourceRepositoryMock.GetByIDFunc: method is nil but ResourceRepository.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedResourceRepository.GetByIDCalls())
func (mock *ResourceRepositoryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByURI calls GetByURIFunc.
func (mock *ResourceRepositoryMock) GetByURI(ctx context.Context, uri string) (*Resource, error) {
	if mock.GetByURIFunc == nil {
		panic("ResourceRepositoryMock.GetByURIFunc: method is nil but ResourceRepository.GetByURI was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URI string
	}{
		Ctx: ctx,
		URI: uri,
	}
	mock.lockGetByURI.Lock()
	mock.calls.GetByURI = append(mock.calls.GetByURI, callInfo)
	mock.lockGetByURI.Unlock()
	return mock.GetByURIFunc(ctx, uri)
}

// GetByURICalls gets all the calls that were made to GetByURI.
// Check the length with:
//
//	len(mockedResourceRepository.GetByURICalls())
func (mock *ResourceRepositoryMock) GetByURICalls() []struct {
	Ctx context.Context
	URI string
} {
	var calls []struct {
		Ctx context.Context
		URI string
	}
	mock.lockGetByURI.RLock()
	calls = mock.calls.GetByURI
	mock.lockGetByURI.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ResourceRepositoryMock) List(ctx context.Context, limit int, offset int) ([]*Resource, error) {
	if mock.ListFunc == nil {
		panic("ResourceRepositoryMock.ListFunc: method is nil but ResourceRepository.List was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, limit, offset)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedResourceRepository.ListCalls())
func (mock *ResourceRepositoryMock) ListCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ResourceRepositoryMock) Update(ctx context.Context, resource *Resource) error {
	if mock.UpdateFunc == nil {
		panic("ResourceRepositoryMock.UpdateFunc: method is nil but ResourceRepository.Update was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource *Resource
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, resource)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedResourceRepository.UpdateCalls())
func (mock *ResourceRepositoryMock) UpdateCalls() []struct {
	Ctx      context.Context
	Resource *Resource
} {
	var calls []struct {
		Ctx      context.Context
		Resource *Resource
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
